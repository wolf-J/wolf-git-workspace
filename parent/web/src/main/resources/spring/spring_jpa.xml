<?xml version="1.0" encoding="UTF-8"?>
<beans default-autowire="byName" default-lazy-init="true"
	xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	 http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd     
	 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	 http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx.xsd
	 http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
	 http://www.springframework.org/schema/data/jpa  http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
	 ">

	<context:annotation-config />

	<context:component-scan base-package="wolf_j.com.github.web"></context:component-scan>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="30"></property>
		<property name="maxWait" value="5000"></property>
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="defaultAutoCommit" value="true" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<!--第二步 -->
	<!--定义实体的工厂bean -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!--实体类位置 -->
		<property name="packagesToScan" value="wolf_j.com.github.web" />
		<!--持久化单元名 -->
		<property name="persistenceUnitName" value="TestJPA" />
		<!--JPA提供者 -->
		<property name="persistenceProviderClass" value="org.hibernate.ejb.HibernatePersistence" />
		<!--JPA属性 -->
		<property name="jpaProperties">
			<props>
				<!--配置方言 -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<!--激活查询日志功能 -->
				<prop key="hibernate.show_sql">false</prop>
				<!--优雅地输出Sql -->
				<prop key="hibernate.format_sql">false</prop>
				<!--添加一条解释型标注 -->
				<prop key="hibernate.use_sql_comments">false</prop>
				<!--配置如何根据java模型生成数据库表结构,常用update,validate -->
				<prop key="hibernate.hbm2ddl.auto">none</prop>
			</props>
		</property>
	</bean>

	<!--第三步 -->
	<!--定义事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="dataSource" ref="dataSource" />
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!--第四步 -->
	<!--定义repository接口的存放目录 -->
	<!--定义接口实现的后缀，通常用Impl -->
	<!--定义实体工厂的引用 -->
	<!--定义事务管理器的引用 -->
	<jpa:repositories base-package="wolf_j.com.github.web"
		repository-impl-postfix="Impl" entity-manager-factory-ref="entityManagerFactory"
		transaction-manager-ref="transactionManager" />

	<!--第五步 -->
	<!--声明采用注解的方式申明事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

</beans>